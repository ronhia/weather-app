apply plugin: 'jacoco'

project.afterEvaluate {

    jacoco {
        toolVersion "0.8.7"
    }

    def jacocoTestReport = task jacocoTestReport(type: JacocoReport)

    // Reune los nombres de tipo de compilacion y tipo de producto en una lista
    def buildTypes = android.buildTypes.collect { type -> type.name }
    def productFlavors = android.productFlavors.collect { flavor -> flavor.name }
    if (!productFlavors) productFlavors.add('')

    productFlavors.each { productFlavorName ->
        buildTypes.each { buildTypeName ->
            def sourceName, sourcePath
            if (!productFlavorName) {
                sourceName = sourcePath = "${buildTypeName}"
            } else {
                sourceName = "${productFlavorName}${buildTypeName.capitalize()}"
                sourcePath = "${productFlavorName}/${buildTypeName}"
            }

            def testTaskName = "test${sourceName.capitalize()}UnitTest"

            def reportTask = task "jacoco${sourceName.capitalize()}Report"(type: JacocoReport, dependsOn: "$testTaskName") {
                group = "Reporting"
                description = "Generate Jacoco coverage reports on the ${sourceName.capitalize()} build."

                def coverageExclusions = [
                        // android
                        '**/R.class',
                        '**/R$*.class',
                        '**/BuildConfig.*',
                        '**/Manifest*.*',
                        // kotlin
                        '**/*$ViewInjector*.*',
                        '**/*$ViewBinder*.*',
                        '**/*$Lambda$*.*', // Jacoco can not handle several "$" in class name.
                        '**/*$*$*.*', // Anonymous classes generated by kotlin
                        // koin
                        '**/di/*',
                ]

                def javaClassesTree = fileTree(
                        dir: "${project.buildDir}/intermediates/classes/${sourcePath}",
                        excludes: coverageExclusions
                )

                def kotlinClassesTree = fileTree(
                        dir: "${project.buildDir}/tmp/kotlin-classes/${sourcePath}",
                        excludes: coverageExclusions
                )

                classDirectories.from = files([javaClassesTree, kotlinClassesTree])

                def javaCoverageSourceDirs = [
                        "src/main/java",
                        "src/$productFlavorName/java",
                        "src/$buildTypeName/java"
                ]

                def kotlinCoverageSourceDirs = [
                        "src/main/kotlin",
                        "src/$productFlavorName/kotlin",
                        "src/$buildTypeName/kotlin"
                ]

                sourceDirectories.from = files(javaCoverageSourceDirs, kotlinCoverageSourceDirs)
                executionData.from = files("${project.buildDir}/jacoco/${testTaskName}.exec")

                reports {
                    xml.enabled = true
                    html.enabled = true
                }
            }

            jacocoTestReport.dependsOn(reportTask)
        }
    }

    test.dependsOn(jacocoTestReport)

    assembleDebug.dependsOn(test)
}